[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ha-mcp"
version = "2.5.4"
description = "Home Assistant MCP Server - Complete control of Home Assistant through MCP"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Julien", email = "github@qc-h.net"}
]
keywords = ["mcp", "home-assistant", "ai", "automation", "smart-home"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastmcp>=2.11.0",
    "httpx>=0.27.0",
    "fuzzywuzzy>=0.18.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "websockets>=12.0",
    "python-levenshtein>=0.25.0", # For faster fuzzy matching
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=5.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "testcontainers>=4.13.0",
    "pytest-xdist>=3.8.0",
    "docker>=7.1.0",
    "requests>=2.25.0",
    "build>=1.2.2",
]

[project.urls]
"Homepage" = "https://github.com/homeassistant-ai/ha-mcp"
"Bug Tracker" = "https://github.com/homeassistant-ai/ha-mcp/issues"
"Repository" = "https://github.com/homeassistant-ai/ha-mcp"

[project.scripts]
ha-mcp = "ha_mcp.__main__:main"
hamcp-test-env = "tests.test_env_manager:main"

[tool.setuptools.packages.find]
where = ["src", "tests"]

[tool.setuptools.package-data]
ha_mcp = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ha_mcp"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
]
ignore_missing_imports = true


[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF100", # unused noqa
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise exceptions with from None/err - non-critical
    "F841",  # local variable assigned but never used
    "B007",  # loop control variable not used within loop body
    "W293",  # blank line contains whitespace
    "W291",  # trailing whitespace
    "F821",  # undefined name (often false positives in complex imports)
    "E722",  # bare except (temporary for cleanup)
    "UP038", # isinstance union syntax (non-critical)
    "I001",  # import sorting handled by isort
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501", "B011"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "automation: automation lifecycle tests",
    "device: device control tests",
    "script: script orchestration tests",
    "helper: helper integration tests",
    "convenience: convenience tools tests (scene, weather, energy, docs)",
    "error_handling: error handling and edge case tests",
    "cleanup: tests that create entities needing cleanup",
]
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "docker>=7.1.0",
    "mypy>=1.17.0",
    "psutil>=7.0.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.12.12",
    "testcontainers>=4.13.0",
    "build>=1.2.2",
]

# Semantic versioning configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "src/ha_mcp/__init__.py:__version__",
]
build_command = ""
dist_path = "dist/"
upload_to_PyPI = true
upload_to_release = true
remove_dist = false

# Commit message parsing
commit_parser = "angular"
commit_parser_options = { major_tags = ["BREAKING", "!"], minor_tags = ["feat"], patch_tags = ["fix", "perf", "refactor"] }

# Changelog configuration
changelog_sections = "feature,fix,breaking,documentation,performance"
changelog_components = "feat,fix,docs,style,refactor,perf,test,chore"

# Version scheme
major_on_zero = true
allow_zero_version = false

# Branch and tag configuration
branch = "master"
upload_to_vcs_release = true
