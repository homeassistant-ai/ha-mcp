[pytest]
# Testing Configuration for Home Assistant MCP Server
testpaths = src
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Command line options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=3
    -ra
    --durations=10

# Test markers
markers =
    # Test speed
    slow: marks tests as slow (use -m "not slow" to skip)

    # Test types
    unit: unit tests (isolated, fast)
    integration: integration tests requiring external services
    e2e: end-to-end tests with full system
    tool_logging: validation of verbose tool logging artifacts
    performance: performance and load tests

    # E2E test categories
    automation: automation lifecycle tests
    device: device control tests
    script: script orchestration tests
    helper: helper integration tests
    convenience: convenience tools tests (scene, weather, energy, docs)
    error_handling: error handling and edge case tests
    cleanup: tests that create entities needing cleanup

# Async support  
asyncio_mode = auto


# Log capture
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Treat warnings as errors to enforce clean tests
filterwarnings =
    error
    # Allow specific non-critical warnings that don't affect functionality
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Allow asyncio ResourceWarnings during test cleanup
    ignore::ResourceWarning
    # Ignore testcontainers deprecation warnings (external library)
    ignore::DeprecationWarning:testcontainers