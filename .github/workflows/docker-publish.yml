name: Docker Images Publish

on:
  # Trigger after SemVer Release completes
  workflow_run:
    workflows: ["SemVer Release"]
    types: [completed]
    branches: [ main, master ]
  # Also support manual dispatch
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  # Build and publish Docker images
  docker-publish:
    name: Build & Publish Docker Images
    runs-on: ubuntu-latest
    # Only run if SemVer Release workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write  # Required to push to GHCR

    steps:
    - uses: actions/checkout@v5
      with:
        ref: master
        fetch-depth: 0

    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Docker image version: $VERSION"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ steps.version.outputs.version }}
          type=semver,pattern={{major}},value=v${{ steps.version.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Match architectures supported by uv base image
        # uv image only provides amd64 and arm64, not 32-bit platforms
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_VERSION=${{ steps.version.outputs.version }}
