name: PR Validation Pipeline - Auto-fix

on:
  workflow_run:
    workflows: ["PR Validation Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  # actions: read  # uncomment if you later fetch artifacts via the Actions API

jobs:
  auto-fix:
    # Keep fork PRs blocked if that's intended; otherwise remove the repo-id check.
    if: >-
      ${{
        github.event.workflow_run.conclusion != 'success' &&
        github.event.workflow_run.head_repository.id == github.repository_id
      }}
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: "3.13"
      FAILED_WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
      FAILED_RUN_URL: ${{ github.event.workflow_run.html_url }}
      FAILED_HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      FAILED_HEAD_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      # Optional but super helpful: confirm what conclusion you're actually seeing.
      - name: Debug event payload
        run: |
          echo 'conclusion=${{ github.event.workflow_run.conclusion }}'
          echo 'name=${{ github.event.workflow_run.name }}'
          echo 'head_branch=${{ github.event.workflow_run.head_branch }}'
          echo 'head_sha=${{ github.event.workflow_run.head_sha }}'
          echo 'run_url=${{ github.event.workflow_run.html_url }}'

      - name: Ensure Codex secrets available
        id: ensure_codex_secrets
        env:
          CODEX_AUTH: ${{ secrets.CODEX_AUTH }}
          CODEX_AUTH_PAT: ${{ secrets.CODEX_AUTH_PAT }}
        run: |
          if [ -n "${CODEX_AUTH}" ] && [ -n "${CODEX_AUTH_PAT}" ]; then
            echo "available=true" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          echo "available=false" >> "${GITHUB_OUTPUT}"
          echo "::notice::Codex secrets missing; skipping auto-fix execution."

      - name: Checkout Failing Ref
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ env.FAILED_HEAD_SHA }}
          fetch-depth: 0

      - name: Install uv
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"

      - name: Set up Python
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: uv sync --all-extras --dev

      - name: Prepare Codex authentication
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          CODEX_AUTH: ${{ secrets.CODEX_AUTH }}
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          set -euo pipefail
          auth_path="$HOME/.codex/auth.json"
          mkdir -p "$(dirname "$auth_path")"
          printf '%s' "$CODEX_AUTH" > "$auth_path"
          chmod 600 "$auth_path"
          cp "$auth_path" "$RUNNER_TEMP/codex-auth-original.json"
          echo "ORIGINAL_CODEX_AUTH=$RUNNER_TEMP/codex-auth-original.json" >> "$GITHUB_ENV"
          echo "Wrote Codex auth to $auth_path"

      - name: Install Codex CLI
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: npm install -g @openai/codex

      - name: Generate Codex output schema
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          cat <<'JSON' > "$RUNNER_TEMP/codex-output-schema.json"
            {
              "type": "object",
              "properties": {
                "summary": { "type": "array", "items": { "type": "string" } },
                "testing": { "type": "array", "items": { "type": "string" } }
              },
              "required": ["summary", "testing"],
              "additionalProperties": false
            }
          JSON
      - name: Run Codex
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          RUNNER_TEMP: ${{ runner.temp }}
          CODEX_QUIET_MODE: "1"   # suppress TUI in CI (non-interactive)
        run: |
          set -euo pipefail
          OUTPUT_FILE="$RUNNER_TEMP/codex-output.json"
          codex exec \
            --ask-for-approval on-failure \
            --sandbox workspace-write \
            --quiet \
            --output-schema "$RUNNER_TEMP/codex-output-schema.json" \
            -o "$OUTPUT_FILE" \
            "You are working in the ha-mcp repository for a Home Assistant MCP server. Investigate the failing 'PR Validation Pipeline' run and implement the minimal code changes required to fix the regression. Keep changes surgical and avoid unrelated refactors. Do not run end-to-end validation tests or docker validation suites; they will execute after the pull request is opened."
          echo "CODEX_OUTPUT=$OUTPUT_FILE" >> "$GITHUB_ENV"
      - name: Parse Codex summary
        id: codex_summary
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          CODEX_OUTPUT: ${{ env.CODEX_OUTPUT }}
        run: |
          python - <<'PY'
          import json, os, sys
          p = os.environ.get("CODEX_OUTPUT")
          if not p or not os.path.exists(p):
              sys.exit("Codex output file missing")
          data = json.load(open(p, "r", encoding="utf-8"))
          s = data.get("summary", []) or []
          t = data.get("testing", []) or []
          s_md = "\n".join(f"- {x}" for x in s) or "- Codex did not provide a summary."
          t_md = "\n".join(f"- {x}" for x in t) or "- Codex did not report any tests."
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write("summary_markdown<<EOF\n" + s_md + "\nEOF\n")
              fh.write("testing_markdown<<EOF\n" + t_md + "\nEOF\n")
          PY

      - name: Create pull request with fixes
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' && success() }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "fix(ci): auto-fix failing tests via Codex"
          branch: codex/auto-fix-${{ github.event.workflow_run.run_id }}
          base: ${{ env.FAILED_HEAD_BRANCH }}
          title: "Auto-fix failing CI via Codex"
          body: |
            Codex automatically generated this PR in response to a CI failure on workflow `${{ env.FAILED_WORKFLOW_NAME }}`.
            Failed run: `${{ env.FAILED_RUN_URL }}`
            Head branch: `${{ env.FAILED_HEAD_BRANCH }}`
            
            ## Summary
            ${{ steps.codex_summary.outputs.summary_markdown }}
            
            ## Testing
            ${{ steps.codex_summary.outputs.testing_markdown }}

      - name: Update CODEX auth secret if refreshed
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' && always() }}
        env:
          ORIGINAL_CODEX_AUTH: ${{ env.ORIGINAL_CODEX_AUTH }}
          GH_TOKEN: ${{ secrets.CODEX_AUTH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail
          auth_path="$HOME/.codex/auth.json"
          if [ -z "${GH_TOKEN}" ] || [ ! -f "$auth_path" ]; then
            echo "Skipping secret refresh (no PAT or missing auth)."
            exit 0
          fi
          if [ -z "${ORIGINAL_CODEX_AUTH:-}" ] || [ ! -f "$ORIGINAL_CODEX_AUTH" ]; then
            echo "Original auth snapshot missing; skipping."
            exit 0
          fi
          if cmp -s "$ORIGINAL_CODEX_AUTH" "$auth_path"; then
            echo "Codex auth unchanged; no secret update needed."
            exit 0
          fi
          echo "::notice::Codex auth.json changed; refreshing CODEX_AUTH secret via GitHub REST API."
          python -m pip install --quiet pynacl
          IFS=$'\t' read -r key_id public_key <<'EOF'
          $(gh api repos/${GITHUB_REPOSITORY}/actions/secrets/public-key --jq '[.key_id, .key] | @tsv')
          EOF
          encrypted_value=$(PUBLIC_KEY="$public_key" AUTH_PATH="$auth_path" python - <<'PY'
          import base64, os
          from pathlib import Path
          from nacl import public
          key = base64.b64decode(os.environ["PUBLIC_KEY"])
          auth = Path(os.environ["AUTH_PATH"]).read_bytes()
          sealed = public.SealedBox(public.PublicKey(key))
          print(base64.b64encode(sealed.encrypt(auth)).decode())
          PY
          )
          gh api --method PUT \
            repos/${GITHUB_REPOSITORY}/actions/secrets/CODEX_AUTH \
            -H "Accept: application/vnd.github+json" \
            -f encrypted_value="$encrypted_value" \
            -f key_id="$key_id"
          echo "Updated CODEX_AUTH secret via REST API."
