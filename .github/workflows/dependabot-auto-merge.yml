name: Dependabot Auto Merge

on:
  workflow_run:
    workflows:
      - PR Validation Pipeline
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    if: >-
      ${{ github.event.workflow_run.event == 'pull_request' &&
          github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Merge successful Dependabot PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const run = context.payload.workflow_run;
            const prs = run.pull_requests || [];

            if (prs.length === 0) {
              core.info('No pull requests associated with this workflow run.');
              return;
            }

            for (const pr of prs) {
              const prNumber = pr.number;

              if (!prNumber) {
                core.info('Encountered associated ref without a pull request number. Skipping.');
                continue;
              }

              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });

              if (prData.user.login !== 'dependabot[bot]') {
                core.info(`PR #${prNumber} is not from Dependabot (author: ${prData.user.login}). Skipping.`);
                continue;
              }

              if (prData.base.ref !== 'master') {
                core.info(`PR #${prNumber} targets ${prData.base.ref} instead of master. Skipping.`);
                continue;
              }

              if (prData.state !== 'open') {
                core.info(`PR #${prNumber} is not open (state: ${prData.state}). Skipping.`);
                continue;
              }

              if (prData.draft) {
                core.info(`PR #${prNumber} is a draft. Skipping.`);
                continue;
              }

              let mergeable = prData.mergeable;
              let mergeableState = prData.mergeable_state;

              for (let attempt = 0; attempt < 5 && mergeable === null; attempt++) {
                core.info(`Mergeability unknown for PR #${prNumber}, retrying in 5 seconds...`);
                await new Promise((resolve) => setTimeout(resolve, 5000));

                const refreshed = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                });

                mergeable = refreshed.data.mergeable;
                mergeableState = refreshed.data.mergeable_state;
              }

              const allowedMergeStates = new Set(['clean', 'has_hooks']);

              if (!mergeable || !allowedMergeStates.has(mergeableState)) {
                core.info(`PR #${prNumber} is not mergeable (mergeable=${mergeable}, state=${mergeableState}). Skipping.`);
                continue;
              }

              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
              });

              core.notice(`Successfully auto-merged Dependabot PR #${prNumber}.`);
            }

