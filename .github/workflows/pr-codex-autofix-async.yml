name: PR Validation Pipeline - Auto-fix (async)

on:
  workflow_run:
    workflows: ["PR Validation Pipeline"]
    types: [completed]

permissions:
  contents: read
  pull-requests: read
  actions: read

env:
  CODEX_AUTOFIX_MODE: ${{ vars.CODEX_AUTOFIX_MODE || 'async' }}

jobs:
  enqueue-async-worker:
    if: >
      ${{
        github.event.workflow_run.conclusion == 'failure' &&
        github.event.workflow_run.head_repository.id == github.repository_id &&
        env.CODEX_AUTOFIX_MODE != 'sync'
      }}
    runs-on: ubuntu-latest

    env:
      FAILED_WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
      FAILED_RUN_URL: ${{ github.event.workflow_run.html_url }}
      FAILED_HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      FAILED_HEAD_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Debug event payload
        run: |
          echo 'conclusion=${{ github.event.workflow_run.conclusion }}'
          echo 'name=${{ github.event.workflow_run.name }}'
          echo "head_branch=$FAILED_HEAD_BRANCH"
          echo 'head_sha=${{ github.event.workflow_run.head_sha }}'
          echo 'run_url=${{ github.event.workflow_run.html_url }}'

      - name: Fetch pull request context
        if: ${{ secrets.CODEX_AUTH != '' }}
        id: fetch_pr
        uses: ./.github/actions/codex-fetch-pr-context

      - name: Compose Codex prompt
        if: ${{ secrets.CODEX_AUTH != '' }}
        id: compose_prompt
        env:
          FAILED_WORKFLOW_NAME: ${{ env.FAILED_WORKFLOW_NAME }}
          FAILED_RUN_URL: ${{ env.FAILED_RUN_URL }}
          FAILED_HEAD_BRANCH: ${{ env.FAILED_HEAD_BRANCH }}
          FAILED_HEAD_SHA: ${{ env.FAILED_HEAD_SHA }}
          PR_CONTEXT: ${{ steps.fetch_pr.outputs.pr_context }}
        run: |
          set -euo pipefail
          prompt_file="$(mktemp)"
          {
            printf 'You are working in the ha-mcp repository for a Home Assistant MCP server on GitHub. '
            printf 'Investigate the failing "%s" run (URL: %s). Identify the regression and implement only the minimal code changes required to make the workflow pass. '
            printf 'Keep changes surgical and avoid unrelated refactors. Do not run end-to-end validation tests or Docker validation suites; they will execute after the pull request is opened.\n\n' \
              "$FAILED_WORKFLOW_NAME" \
              "$FAILED_RUN_URL"
            echo 'Summarise the modifications you make and list any tests you execute.'
          } > "$prompt_file"

          if [[ -n "${PR_CONTEXT:-}" ]]; then
            {
              echo
              echo 'Pull request context:'
              printf '%s\n' "$PR_CONTEXT"
            } >> "$prompt_file"
          fi

          {
            echo
            echo 'Failure context:'
            printf '  - Workflow name: %s\n' "$FAILED_WORKFLOW_NAME"
            printf '  - Run URL: %s\n' "$FAILED_RUN_URL"
            printf '  - Head branch: %s\n' "$FAILED_HEAD_BRANCH"
            printf '  - Head SHA: %s\n' "$FAILED_HEAD_SHA"
          } >> "$prompt_file"

          {
            echo 'prompt<<EOF'
            cat "$prompt_file"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Invoke Codex automation
        if: ${{ secrets.CODEX_AUTH != '' }}
        id: codex
        uses: ./.github/actions/codex-run
        with:
          mode: async
          prompt: ${{ steps.compose_prompt.outputs.prompt }}
          codex-auth: ${{ secrets.CODEX_AUTH }}

      - name: Update CODEX auth secret if refreshed
        if: ${{ always() && steps.codex.outputs.available == 'true' }}
        uses: ./.github/actions/codex-update-auth
        with:
          codex_auth_path: ${{ steps.codex.outputs.codex_auth_path }}
          original_codex_auth: ${{ steps.codex.outputs.original_codex_auth }}
          gh_token: ${{ secrets.CODEX_AUTH_PAT }}
          repository: ${{ github.repository }}
