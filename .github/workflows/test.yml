name: Codex Hello World Tests

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  codex-hello:
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: "3.13"
      CODEX_CLI_MODEL: "gpt-4.1-mini"
      CODEX_CLI_MODEL_FALLBACKS: "gpt-4o-mini gpt-4o-mini-2024-08-06 gpt-4.1 gpt-4o-mini-2024-05-13"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Ensure Codex secrets available
        id: ensure_codex_secrets
        env:
          CODEX_AUTH: ${{ secrets.CODEX_AUTH }}
          CODEX_AUTH_PAT: ${{ secrets.CODEX_AUTH_PAT }}
        run: |
          if [ -n "${CODEX_AUTH}" ] && [ -n "${CODEX_AUTH_PAT}" ]; then
            echo "available=true" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          echo "available=false" >> "${GITHUB_OUTPUT}"
          echo "::notice::Codex secrets missing; skipping tests."

      - name: Prepare Codex authentication
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          CODEX_AUTH: ${{ secrets.CODEX_AUTH }}
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          set -euo pipefail
          auth_path="$HOME/.codex/auth.json"
          mkdir -p "$(dirname "$auth_path")"
          printf '%s' "$CODEX_AUTH" > "$auth_path"
          chmod 600 "$auth_path"
          echo "Wrote Codex auth to $auth_path"

      - name: Install Node and Codex CLI
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: |
          npm install -g @openai/codex@latest

      - name: Simple hello world
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: |
          set -uo pipefail
          : "${CODEX_CLI_MODEL_FALLBACKS:=}"
          success=0
          for candidate in ${CODEX_CLI_MODEL} ${CODEX_CLI_MODEL_FALLBACKS}; do
            if [ -z "${candidate}" ]; then
              continue
            fi
            echo "=== Basic text with model: ${candidate} ==="
            if codex exec --model "${candidate}" "Say hello world"; then
              echo "=== Success: ${candidate} ==="
              success=1
            else
              status=$?
              echo "::warning::codex exec failed for ${candidate} with exit code ${status}"
            fi
            echo
          done
          if [ "${success}" -eq 0 ]; then
            echo "::error::No codex exec variation succeeded"
            exit 1
          fi

      - name: Structured hello world
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: |
          set -uo pipefail
          : "${CODEX_CLI_MODEL_FALLBACKS:=}"
          echo "=== Structured output ==="
          cat <<'JSON' > schema.json
          {
            "type": "object",
            "properties": {
              "message": { "type": "string" }
            },
            "required": ["message"],
            "additionalProperties": false
          }
          JSON
          success=0
          mkdir -p codex_artifacts
          for candidate in ${CODEX_CLI_MODEL} ${CODEX_CLI_MODEL_FALLBACKS}; do
            if [ -z "${candidate}" ]; then
              continue
            fi
            safe_name=$(printf '%s' "${candidate}" | tr -c '[:alnum:]' '_')
            output_path="codex_artifacts/output_${safe_name}.json"
            echo "=== Structured output with model: ${candidate} ==="
            if codex exec \
              --model "${candidate}" \
              --output-schema schema.json \
              -o "${output_path}" \
              "Output a JSON object with key 'message' set to 'hello world'."; then
              echo "=== ${output_path} ==="
              cat "${output_path}"
              success=1
            else
              status=$?
              echo "::warning::Structured run failed for ${candidate} with exit code ${status}"
            fi
            echo
          done
          if [ "${success}" -eq 0 ]; then
            echo "::error::No structured codex exec variation succeeded"
            exit 1
          fi

      - name: Sandbox write test
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        env:
          CODEX_QUIET_MODE: "1"
        run: |
          set -uo pipefail
          : "${CODEX_CLI_MODEL_FALLBACKS:=}"
          echo "=== Workspace write sandbox ==="
          mkdir -p codex_artifacts
          success=0
          for candidate in ${CODEX_CLI_MODEL} ${CODEX_CLI_MODEL_FALLBACKS}; do
            if [ -z "${candidate}" ]; then
              continue
            fi
            safe_name=$(printf '%s' "${candidate}" | tr -c '[:alnum:]' '_')
            artifact_path="codex_artifacts/hello_${safe_name}.txt"
            rm -f "${artifact_path}"
            echo "=== Workspace write with model: ${candidate} ==="
            if codex exec \
              --model "${candidate}" \
              --sandbox workspace-write \
              --quiet \
              "Create a file ${artifact_path} containing the text 'hello world' and confirm it exists."; then
              echo "=== File contents (${artifact_path}) ==="
              cat "${artifact_path}"
              success=1
            else
              status=$?
              echo "::warning::Sandbox run failed for ${candidate} with exit code ${status}"
            fi
            echo
          done
          if [ "${success}" -eq 0 ]; then
            echo "::error::No sandbox codex exec variation succeeded"
            exit 1
          fi

      - name: JSON events test
        if: ${{ steps.ensure_codex_secrets.outputs.available == 'true' }}
        run: |
          set -uo pipefail
          : "${CODEX_CLI_MODEL_FALLBACKS:=}"
          echo "=== JSON events mode ==="
          mkdir -p codex_artifacts
          success=0
          for candidate in ${CODEX_CLI_MODEL} ${CODEX_CLI_MODEL_FALLBACKS}; do
            if [ -z "${candidate}" ]; then
              continue
            fi
            safe_name=$(printf '%s' "${candidate}" | tr -c '[:alnum:]' '_')
            events_path="codex_artifacts/events_${safe_name}.jsonl"
            echo "=== JSON events with model: ${candidate} ==="
            if codex exec --model "${candidate}" --json "Say hello world" | tee "${events_path}"; then
              echo "=== Tail events (${events_path}) ==="
              tail -n 10 "${events_path}"
              success=1
            else
              status=${PIPESTATUS[0]}
              echo "::warning::JSON events run failed for ${candidate} with exit code ${status}"
            fi
            echo
          done
          if [ "${success}" -eq 0 ]; then
            echo "::error::No JSON events codex exec variation succeeded"
            exit 1
          fi
